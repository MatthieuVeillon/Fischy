

---
- name: Deploy React App Front-end Build
  connection: ssh
  hosts: staging_host
  vars:
    homeDir: /home/ubuntu
    repo_folder: /var/www/github-deployment/repos/
    live_folder_html: /var/www/test-mv.com/html
    live_folder_api: /var/www/test-mv.com/api
    repo_name: MatthieuVeillon/Fischy
    privateKey: /Users/matt/.ssh/id_rsa
    ansible_distribution_release: "xenial" #trusty
    database_user: fischy
    database_name: fischy
    database_host: localhost
    database_password: fischy
    database_port: 5432
    service_name: fischy-api

# tasks, indented under playbook name
  tasks:
    - name: Create APP Directory
      file:
        path: "{{live_folder_html}}"
        state: directory

    - name: Create API Directory
      file:
        path: "{{live_folder_api}}"
        state: directory

    - name: Install https APT transport
      apt:
        name: apt-transport-https
        update_cache: true

    - name: YARN | Add Yarn APT key
      apt_key:
        url: https://dl.yarnpkg.com/debian/pubkey.gpg
        state: present

    - name: YARN | Add Yarn APT repo
      apt_repository:
        repo: deb https://dl.yarnpkg.com/debian/ stable main
        state: present
        filename: yarn

    - name: NODE | Add Node APT key
      apt_key:
        url: "https://deb.nodesource.com/gpgkey/nodesource.gpg.key"
        state: present

    - name: NODE | Add Node APT repo
      apt_repository:
        repo: "deb https://deb.nodesource.com/node_14.x {{ ansible_distribution_release }} main"
        state: present
        update_cache: yes

    - name: Install Packages
      apt: name={{ item }} update_cache=yes state=latest
      with_items:
        - build-essential
        - nodejs
        - git
        - mcrypt
        - nginx
        - curl
        - yarn

    - name: PM2 | Install
      yarn:
        name: pm2
        global: yes

    - name: Install packages
      apt:
        name:
          - postgresql
          - '{{ (ansible_python_version is version("3.0.0", ">=")) | ternary("python3-psycopg2", "python-psycopg2") }}'
        update_cache: true

# Create User / Group to be used by POSTGRES
    - name: Create fischy group
      group:
        name: "{{database_user}}"
        state: present

    - name: Create fischy user
      user:
        name: "{{database_user}}"
        state: present
        group: "{{database_user}}"

    - name: POSTGRES Create users
      become: true
      become_user: postgres
      postgresql_user:
        name: "{{database_user}}"
        state: present
        password: "{{database_password}}"

    - name: POSTGRES - Create postgresql database
      postgresql_db:
        name: "{{database_name}}"
        state: present
        owner: "{{database_user}}"
      become: true
      become_user: postgres

#    - name: POSTGRES- Install postgresql extensions
#      postgresql_ext:
#        name: '{{ ext }}'
#        db: '{{ db.key }}'
#      with_items: '{{ db.value.exts|default([]) }}'
#      loop_control:
#        loop_var: ext
#      become: true
#      become_user: postgres


# Postgres
### Create user / group (Q: is this only used for postgres ?)
### Q : Do I need to install extension

# Backend Service
### Deploy backend build in api folder  see https://github.com/thetribeio/lodi-backoffice/blob/develop/ansible/deployment.yaml
### pay attention to before finalize and after_finalize to start the service
### Q : do I need the service config in my simple use case  ? https://github.com/thetribeio/ansible-roles/blob/255f31405e0b45f9f54311235f7493e66a1635e8/service/templates/service.service.j2
### stop existing service if any
### delete existing service if any
### Configure new service
### Restart service and passing needed env : see https://sairamkrish.medium.com/simple-ansible-script-to-deploy-nodejs-microservices-37240ad59f1a


    - name: Git clone repo
      git:
        repo: git@github.com:{{ repo_name }}.git
        dest: "{{ repo_folder }}"
        update: yes

    - name: APP | Install dependencies
      command: yarn install
      args:
        chdir: "{{ repo_folder }}/app"

    - name: APP | Build project
      command: yarn build
      args:
        chdir: "{{ repo_folder }}/app"
      environment:
        NODE_ENV: production
        REACT_APP_API_URL: http://www.test-mv.com/api/

    - name: APP | Copy build to live directory
      command: cp -TRv dist {{ live_folder_html }}
      args:
        chdir: "{{ repo_folder }}/app"

    - name: API | Install dependencies
      command: yarn install
      args:
        chdir: "{{ repo_folder }}/api"

    - name: API | Build project
      command: yarn build
      args:
        chdir: "{{ repo_folder }}/api"

    - name: API | Copy build to live directory
      command: cp -TRv build {{ live_folder_api }}
      args:
        chdir: "{{ repo_folder }}/api"

    - name: API | Copy node_modules to live directory
      command: cp -R node_modules {{ live_folder_api }}
      args:
        chdir: "{{ repo_folder }}/api"


    - name: API | Stop the service
      command: pm2 stop {{service_name}}
      become: true
      ignore_errors: yes

    - name: API | Delete the service
      command: pm2 delete {{service_name}}
      become: true
      ignore_errors: yes

    - name: API | Start service
      command: pm2 start -u {{database_user}} --hp /home/{{database_user}} --name {{service_name}} server.js
      become: true
      args:
        chdir: "{{live_folder_api}}"
      environment:
        NODE_ENV: production
        DATABASE_HOST: "{{database_host}}"
        DATABASE_NAME: "{{database_name}}"
        DATABASE_USER: "{{database_user}}"
        DATABASE_PASSWORD: "{{database_password}}"
        DATABASE_PORT: "{{database_port}}"

    - name: setup Nginx
      include_role:
        name: nginx

# end of Playbook